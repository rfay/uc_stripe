<?php

/**
 * @file
 * A stripe.js PCI-compliant payment gateway
 */

use \Drupal\Core\Form\FormState;

///**
// * Implements hook_uc_payment_gateway to register this payment gateway
// * @return array
// */
//function uc_stripe_uc_payment_gateway() {
//  $gateways['uc_stripe'] = [
//    'title' => t('Stripe Gateway'),
//    'description' => t('Process card payments using Stripe JS.'),
//    'settings' => 'uc_stripe_settings_form',
//    'credit' => 'uc_stripe_charge',
//    'credit_txn_types' => array(UC_CREDIT_AUTH_CAPTURE),
//  ];
//  return $gateways;
//}

/**
 * @TODO: Revisit this when uc_recurring is available
 *
 * Implements hook_recurring_info() to integrate with uc_recurring
 *
 * @return mixed
 */
//function uc_stripe_recurring_info() {
//  $items['uc_stripe'] = array(
//    'name' => t('Stripe'),
//    'payment method' => 'credit',
//    'module' => 'uc_recurring',
//    'fee handler' => 'uc_stripe',
//    'process callback' => 'uc_stripe_process',
//    'renew callback' => 'uc_stripe_renew',
//    'cancel callback' => 'uc_stripe_cancel',
//    'own handler' => FALSE,
//    'menu' => array(
//      'charge' => UC_RECURRING_MENU_DEFAULT,
//      'edit' => UC_RECURRING_MENU_DEFAULT,
//      'cancel' => UC_RECURRING_MENU_DEFAULT,
//    ),
//  );
//  return $items;
//}


/**
 * Implements hook_form_FORMID_alter() to change the checkout form
 * All work as a result is done in JS, the ordinary post does not happen.
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function uc_stripe_form_uc_cart_checkout_form_alter(&$form, FormState $form_state) {

  $payment_form = &$form['panes']['payment']['details'];

  $payment_form['stripe_nojs_warning'] = array(
    '#type' => 'item',
    '#markup' => '<span id="stripe-nojs-warning" class="stripe-warning">' . t('Sorry, for security reasons your card cannot be processed because Javascript is disabled in your browser.') . '</span>',
    '#weight' => -1000,
  );

  $payment_form['stripe_token'] = array(
    '#type' => 'hidden',
    '#default_value' => 'default',
    '#attributes' => array(
      'id' => 'edit-panes-payment-details-stripe-token',
    ),
  );

  // Prevent form Credit card fill and submission if javascript has not removed
  // the "disabled" attributes..
  // If JS happens to be disabled, we don't want user to be able to enter CC data.
  // Note that we can't use '#disabled', as it causes Form API to discard all input,
  // so use the disabled attribute instead.
  $form['panes']['payment']['details']['cc_number']['#attributes']['disabled'] = 'disabled';
  if (empty($form['actions']['continue']['#attributes'])) {
    $form['actions']['continue']['#attributes'] = array();
  }
  $form['actions']['continue']['#attributes']['disabled'] = 'disabled';

  $config = \Drupal::config('uc_payment.method.stripe');
  $apikey = $config->get('settings.uc_stripe_testmode')
    ? $config->get('settings.uc_stripe_api_key_test_publishable')
    : $config->get('settings.uc_stripe_api_key_live_publishable');


  // Add custom JS and CSS
  $form['#attached']['library'][] = 'uc_stripe/uc_stripe';
  $form['#attached']['drupalSettings']['uc_stripe']['publishable_key'] = $apikey;

  // Add custom submit which will do saving away of token during submit.
  $form['#submit'][] = 'uc_stripe_checkout_form_customsubmit';

  // Add a section for stripe.js error messages (CC validation, etc.)
  $form['panes']['messages'] = array(
    '#markup' => "<div id='uc_stripe_messages' class='messages error hidden'></div>",
  );

  // TODO: Revisit
//  if (uc_credit_default_gateway() == 'uc_stripe') {
//    if (\Drupal::config('uc_stripe.settings')->get('uc_stripe_testmode')) {
//      // @FIXME
//// l() expects a Url object, created from a route name or external URI.
//// $form['panes']['testmode'] = array(
////         '#prefix' => "<div class='messages' style='background-color:#BEEBBF'>",
////         '#markup' => t("Test mode is <strong>ON</strong> for the Stripe Payment Gateway. Your  card will not be charged. To change this setting, edit the !link", array('!link' => l("Stripe settings", "admin/store/settings/payment/method/credit"))),
////         '#suffix' => "</div>",
////       );
//
//    }
//  }
}


/**
 * Implements hook_order_pane to provide the stripe customer info
 *
 * @return array
 */
// TODO: Remove as it's obsolete
//function uc_stripe_uc_order_pane() {
//  $panes[] = array(
//    'id' => 'uc_stripe',
//    'callback' => 'uc_stripe_order_pane_stripe',
//    'title' => t('Stripe Customer Info'),
//    'desc' => t("Stripe Information"),
//    'class' => 'pos-left',
//    'weight' => 3,
//    'show' => array('view', 'edit'),
//  );
//
//  return $panes;
//}

/**
 * Implements hook_uc_checkout_complete()
 *
 * Saves stripe customer_id into the user->data object
 *
 * @param $order
 * @param $account
 */
function uc_stripe_uc_checkout_complete($order, $account) {

  if ($order->payment_method == "credit") {
    // Pull the stripe customer ID from the temp storage.
    // It got there in uc_stripe_checkout_form_customsubmit()

    $stripe_customer_id = \Drupal::service('user.private_tempstore')->get('uc_stripe')->get('uc_stripe_customer_id');

    \Drupal::getContainer('user.data')->set('uc_stripe', $account->id(), 'uc_stripe_customer_id', $stripe_customer_id);
  }
}


/**
 * Implements uc_order_pane_callback() specified in 'callback' of
 * uc_stripe_uc_order_pane()
 *
 * Returns text for customer id for order pane.
 *
 * @param $op
 * @param $order
 * @param $form
 * @param $form_state
 * @return array
 */
// TODO: Find out where this functionality would be done in D8
//function uc_stripe_order_pane_stripe($op, $order, &$form = NULL, &$form_state = NULL) {
//  switch ($op) {
//    case 'view':
//      $stripe_customer_id = _uc_stripe_get_customer_id($order->id());
//      $output = t("Customer ID: ") . $stripe_customer_id;
//      return array('#markup' => $output);
//    default:
//      return;
//  }
//}

/**
 * Custom submit function to store the stripe token
 *
 * Since we don't have a user account at this step, we're going to store the token
 * in private_tempstore. We'll grab the token in the charge callback and use it to charge
 *
 * @param $form
 * @param $form_state
 */
function uc_stripe_checkout_form_customsubmit($form, FormState $form_state) {
  // This submit may be entered on another payment type, so don't set session in that case.
  $stripe_token_val = $form_state->getValue(['panes', 'payment', 'details', 'stripe_token']);
  if (!empty($stripe_token_val)) {
    \Drupal::service('user.private_tempstore')->get('uc_stripe')->set('uc_stripe_token', $stripe_token_val);
  }
}

/**
 * TODO: Revisit this when uc_recurring is available.
 *
 * Handle renewing a recurring fee, called by uc_recurring
 *
 * Runs when the subscription interval is hit. So once a month or whatever.
 * This just charges the stripe customer whatever amount ubercart wants. It does
 * not use the Stripe subscription feature.
 *
 * @param $order
 * @param $fee
 * @return bool
 */
//function uc_stripe_renew($order, &$fee) {
//
//  try {
//
//    //Load the API
//    _uc_stripe_prepare_api();
//
//    //Get the customer ID
//    $stripe_customer_id = _uc_stripe_get_customer_id($order->id());
//
//    if (empty($stripe_customer_id)) {
//      throw new Exception('No stripe customer ID found');
//    }
//
//
//    //Create the charge
//    $amount = $fee->fee_amount;
//    $amount = $amount * 100;
//
//    $charge = \Stripe\Charge::create(array(
//        "amount" => $amount,
//        "currency" => strtolower($order->currency),
//        "customer" => $stripe_customer_id
//      )
//    );
//
//
//    uc_payment_enter($order->order_id, $order->payment_method, $order->order_total, $fee->id(), $charge, "Success");
//
//    $formatted_amount = number_format($fee->fee_amount, 2);
//    $message = t('Card renewal payment of @amount processed successfully.', array('@amount' => $formatted_amount));
//    uc_order_comment_save($fee->order_id, $order->uid, $message, 'order', 'completed', FALSE);
//
//    return TRUE;
//
//  } catch (Exception $e) {
//    $result = array(
//      'success' => FALSE,
//      'comment' => $e->getCode(),
//      'message' => t("Renewal Failed for order !order: !message", array(
//        "!order" => $order->order_id,
//        "!message" => $e->getMessage()
//      )),
//    );
//
//    uc_order_comment_save($order->order_id, $order->uid, $result['message'], 'admin');
//
//    \Drupal::logger('uc_stripe')->notice('Renewal failed for order @order_id, code=@code, message: @message', array('@order_id' => $order->order_id, '@code' => $result['comment'], '@message' => $result['message']));
//
//    return FALSE;
//  }
//
//
//}

/**
 * TODO: Revisit this when uc_recurring is available
 * UC Recurring: Process a new recurring fee.
 * This runs when subscriptions are "set up" for the first time.
 * There is no action to be taken here except returning TRUE because the customer
 * ID is already stored with the user, where it can be accessed when next charge
 * takes place.
 *
 * @param $order
 * @param $fee
 * @return bool
 */
//function uc_stripe_process($order, &$fee) {
//  return TRUE;
//}

/**
 * TODO: Revisit this when uc_recurring is available
 *
 * UC Recurring: Cancel a recurring fee.
 * This runs when subscriptions are cancelled
 * Since we're handling charge intervals in ubercart, this doesn't need to do anything.
 *
 * @param $order
 * @param $op
 * @return bool
 */
//function uc_stripe_cancel($order, $op) {
//  $message = t("Subscription Canceled");
//  uc_order_comment_save($order->order_id, $order->uid, $message, 'order', 'completed', FALSE);
//  return TRUE;
//}


/**
 * Replace uc_credit's form themeing with our own - adds stripe_token.
 * @param $form
 * @return string
 */
//function uc_stripe_uc_payment_method_credit_form($form) {
//  $output = \Drupal::service("renderer")->render($form['stripe_nojs_warning']);
//  $output .= \Drupal::service("renderer")->render($form['config_error']);
//  // @FIXME
//// theme() has been renamed to _theme() and should NEVER be called directly.
//// Calling _theme() directly can alter the expected output and potentially
//// introduce security issues (see https://www.drupal.org/node/2195739). You
//// should use renderable arrays instead.
////
////
//// @see https://www.drupal.org/node/2195739
//// $output .= theme('uc_payment_method_credit_form',$form);
//
//  $output .= \Drupal::service("renderer")->render($form['stripe_token']);
//  $output .= \Drupal::service("renderer")->render($form['dummy_image_load']);
//
//  return $output;
//}


